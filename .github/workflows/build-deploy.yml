# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build&Deploy

on:
  workflow_dispatch:
  # push:
  #   branches: [ "main" ]

env:
  GOOS: linux
  GOARCH: arm64

jobs:
  build:
    runs-on: self-hosted
    strategy:
      fail-fast: true    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Create Env file
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        echo "CWD="${{env.GITHUB_WORKSPACE}} > .env && \
        echo "DB_USER="${{secrets.DB_USER}} >> .env && \
        echo "DB_PASS="${{secrets.DB_PASS}} >> .env && \
        echo "DB_NAME="${{secrets.DB_NAME}} >> .env && \
        echo "DOCKER_DB_VOLUME="${{secrets.DOCKER_DB_VOLUME}} >> .env && \
        echo "DOCKER_LOCAL_VOLUME="${{secrets.DOCKER_LOCAL_VOLUME}} >> .env && \
        echo "DOCKER_LOCAL_MOUNT="${{secrets.LOCAL_MOUNT}} >> .env && \
        echo "TELEGRAM_TOKEN="${{secrets.TELEGRAM_TOKEN}} >> .env

    - name: Test
      run: go test -v ./...    

    - name: Build Im-Worker
      working-directory: ./workers/im-worker
      run: ./scripts/build-wrapper.sh

    - name: Build Telegram Service
      working-directory: ./telegram-frontend-service
      run: ./scripts/build-wrapper.sh

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
    - name: Deploy Postgres Container
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: sudo docker compose up -d database

    - name: Boot MQ
      run: sudo docker compose up -d nats

    - name: Run migrations
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: goose -dir=schemas postgres "user=${{secrets.DB_USER}} password=${{secrets.DB_PASS}} dbname=${{secrets.DB_NAME}} ${{secrets.DB_EXTRA}}" up

    - name: Deploy Im-Worker
      run: sudo docker compose up -d im-worker --build

    - name: Deploy Telegram Service
      run: sudo docker compose up -d telegram-service --build    

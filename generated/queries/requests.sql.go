// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: requests.sql

package queries

import (
	"context"
)

const createRequest = `-- name: CreateRequest :one
INSERT INTO requests (file, requester_id, filter_name)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateRequestParams struct {
	File        string
	RequesterID string
	FilterName  string
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createRequest, arg.File, arg.RequesterID, arg.FilterName)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteRequest = `-- name: DeleteRequest :exec
DELETE FROM requests
WHERE id = $1
`

func (q *Queries) DeleteRequest(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRequest, id)
	return err
}

const getRequestsInStatus = `-- name: GetRequestsInStatus :many
SELECT file, requester_id FROM requests
WHERE status = $1
`

type GetRequestsInStatusRow struct {
	File        string
	RequesterID string
}

func (q *Queries) GetRequestsInStatus(ctx context.Context, status string) ([]GetRequestsInStatusRow, error) {
	rows, err := q.db.QueryContext(ctx, getRequestsInStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRequestsInStatusRow
	for rows.Next() {
		var i GetRequestsInStatusRow
		if err := rows.Scan(&i.File, &i.RequesterID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRequestStatus = `-- name: UpdateRequestStatus :one
UPDATE requests
SET status = $2
WHERE id = $1
RETURNING id, file, requester_id, status, filter_name
`

type UpdateRequestStatusParams struct {
	ID     int64
	Status string
}

func (q *Queries) UpdateRequestStatus(ctx context.Context, arg UpdateRequestStatusParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, updateRequestStatus, arg.ID, arg.Status)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.File,
		&i.RequesterID,
		&i.Status,
		&i.FilterName,
	)
	return i, err
}

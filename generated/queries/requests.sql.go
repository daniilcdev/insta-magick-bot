// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: requests.sql

package queries

import (
	"context"
	"strings"
)

const createRequest = `-- name: CreateRequest :exec
INSERT INTO requests (file, requester_id, status)
VALUES (?, ?, "Pending")
`

type CreateRequestParams struct {
	File        string
	RequesterID string
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) error {
	_, err := q.db.ExecContext(ctx, createRequest, arg.File, arg.RequesterID)
	return err
}

const deleteCompletedRequests = `-- name: DeleteCompletedRequests :exec
DELETE FROM requests
WHERE status = "Processed"
`

func (q *Queries) DeleteCompletedRequests(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteCompletedRequests)
	return err
}

const obtainCompleted = `-- name: ObtainCompleted :many
SELECT file, requester_id FROM requests
WHERE status = "Processed"
`

type ObtainCompletedRow struct {
	File        string
	RequesterID string
}

func (q *Queries) ObtainCompleted(ctx context.Context) ([]ObtainCompletedRow, error) {
	rows, err := q.db.QueryContext(ctx, obtainCompleted)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ObtainCompletedRow
	for rows.Next() {
		var i ObtainCompletedRow
		if err := rows.Scan(&i.File, &i.RequesterID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const schedulePending = `-- name: SchedulePending :many
UPDATE requests
SET status = "Processing"
WHERE id in (
        SELECT id
        FROM requests
        WHERE status = "Pending"
        LIMIT ?
    )
RETURNING file
`

func (q *Queries) SchedulePending(ctx context.Context, limit int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, schedulePending, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var file string
		if err := rows.Scan(&file); err != nil {
			return nil, err
		}
		items = append(items, file)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFilesStatus = `-- name: UpdateFilesStatus :exec
UPDATE requests
SET status = "Processed"
WHERE file in (/*SLICE:filenames*/?)
`

func (q *Queries) UpdateFilesStatus(ctx context.Context, filenames []string) error {
	query := updateFilesStatus
	var queryParams []interface{}
	if len(filenames) > 0 {
		for _, v := range filenames {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:filenames*/?", strings.Repeat(",?", len(filenames))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:filenames*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}
